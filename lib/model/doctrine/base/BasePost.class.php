<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Post', 'doctrine');

/**
 * BasePost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property string $content
 * @property string $date
 * @property string $state
 * @property integer $user_id
 * @property string $created_at
 * @property string $updated_at
 * @property string $slug
 * @property Doctrine_Collection $Comment
 * @property Doctrine_Collection $PostCategory
 * @property Doctrine_Collection $PostIndex
 * @property Doctrine_Collection $PostTag
 * @property Doctrine_Collection $Visit
 * @property Doctrine_Collection $sfGuardUser
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method string              getTitle()        Returns the current record's "title" value
 * @method string              getContent()      Returns the current record's "content" value
 * @method string              getDate()         Returns the current record's "date" value
 * @method string              getState()        Returns the current record's "state" value
 * @method integer             getUserId()       Returns the current record's "user_id" value
 * @method string              getCreatedAt()    Returns the current record's "created_at" value
 * @method string              getUpdatedAt()    Returns the current record's "updated_at" value
 * @method string              getSlug()         Returns the current record's "slug" value
 * @method Doctrine_Collection getComment()      Returns the current record's "Comment" collection
 * @method Doctrine_Collection getPostCategory() Returns the current record's "PostCategory" collection
 * @method Doctrine_Collection getPostIndex()    Returns the current record's "PostIndex" collection
 * @method Doctrine_Collection getPostTag()      Returns the current record's "PostTag" collection
 * @method Doctrine_Collection getVisit()        Returns the current record's "Visit" collection
 * @method Doctrine_Collection getSfGuardUser()  Returns the current record's "sfGuardUser" collection
 * @method Post                setId()           Sets the current record's "id" value
 * @method Post                setTitle()        Sets the current record's "title" value
 * @method Post                setContent()      Sets the current record's "content" value
 * @method Post                setDate()         Sets the current record's "date" value
 * @method Post                setState()        Sets the current record's "state" value
 * @method Post                setUserId()       Sets the current record's "user_id" value
 * @method Post                setCreatedAt()    Sets the current record's "created_at" value
 * @method Post                setUpdatedAt()    Sets the current record's "updated_at" value
 * @method Post                setSlug()         Sets the current record's "slug" value
 * @method Post                setComment()      Sets the current record's "Comment" collection
 * @method Post                setPostCategory() Sets the current record's "PostCategory" collection
 * @method Post                setPostIndex()    Sets the current record's "PostIndex" collection
 * @method Post                setPostTag()      Sets the current record's "PostTag" collection
 * @method Post                setVisit()        Sets the current record's "Visit" collection
 * @method Post                setSfGuardUser()  Sets the current record's "sfGuardUser" collection
 * 
 * @package    Blog
 * @subpackage model
 * @author     Conates
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePost extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('post');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('content', 'string', 2147483647, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             'length' => 2147483647,
             ));
        $this->hasColumn('date', 'string', 19, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             'length' => 19,
             ));
        $this->hasColumn('state', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'string', 19, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             'length' => 19,
             ));
        $this->hasColumn('updated_at', 'string', 19, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'autoincrement' => false,
             'length' => 19,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Comment', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('PostCategory', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('PostIndex', array(
             'local' => 'id',
             'foreign' => 'id'));

        $this->hasMany('PostTag', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('Visit', array(
             'local' => 'id',
             'foreign' => 'post_id'));

        $this->hasMany('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}